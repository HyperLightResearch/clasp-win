(in-package #:cc-bmir)

(defclass fixnump (bir:conditional-test) ())
(defclass consp (bir:conditional-test) ())
(defclass characterp (bir:conditional-test) ())
(defclass single-float-p (bir:conditional-test) ())
(defclass generalp (bir:conditional-test) ())
(defclass headerq (bir:conditional-test)
  ((%info :initarg :info :reader info)))

;;;

(defclass memref2 (bir:one-input bir:one-output bir:instruction)
  ((%offset :initarg :offset :reader offset :type integer)))

(defclass load (cc-bir:atomic bir:one-input bir:one-output bir:instruction)
  ())

(defclass store (cc-bir:atomic bir:no-output bir:instruction)
  ())

(defclass cas (cc-bir:atomic bir:one-output bir:instruction)
  ())

;;;

;;; Convert a set of T_O* to a T_mv, or a T_mv to the primary T_O*.
;;; Generated by values coercion. ftm is distinct from bir:fixed-to-multiple,
;;; which is important to program semantics as it represents cl:values calls,
;;; whereas these are more of a low level detail.
(defclass ftm (bir:one-input bir:one-output bir:instruction) ())
(defclass mtf (bir:one-input bir:one-output bir:instruction) ())

;;; Convert between fixed number of values rtypes.
;;; E.g. it can receive (:object :object) and output (:object), or vice versa.
;;; When shrinking this performs no actual operation. When adding all it does is
;;; load the NIL constant.
(defclass fixed-values-pad (bir:one-input bir:one-output bir:instruction) ())

;;; Represent values in a different way; i.e. box and unbox.
;;; The input and output rtype must be fixed values and of the same length.
;;; Identity conversions are always allowed and NOPs. They may come up when
;;; un/boxing a group of values.
;;; Otherwise, one of each pair of value rtypes must be :object, i.e. only
;;; boxing and unboxing are possible now, not general casting.
(defclass re-present (bir:one-input bir:one-output bir:instruction) ())

;;;

(defclass datum (bir:datum)
  ((%rtype :initarg :rtype :accessor rtype)))

(defclass output (datum bir:output) ())
(defclass phi (datum bir:phi) ())

(defmethod rtype ((datum bir:variable)) '(:object))
(defmethod rtype ((datum bir:argument)) '(:object))
(defmethod rtype ((datum bir:load-time-value)) '(:object))
(defmethod rtype ((datum bir:constant)) '(:object))
